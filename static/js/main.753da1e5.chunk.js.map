{"version":3,"sources":["components/ImageButton/index.js","services/ImageService.js","components/Notifications/index.js","components/ImageButtonsGrid/index.js","components/Navbar/index.js","components/Spotlight/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageButton","props","react_default","a","createElement","className","onClick","src","url","alt","ImageService","_this","this","Promise","resolve","reject","axios","get","then","response","imageIds","data","map","image","id","extractRandomImageUrls","catch","err","randomImageUrls","startingIndex","parseInt","Math","random","length","i","push","concat","Notifications","toast","dismiss","error","autoClose","position","POSITION","BOTTOM_CENTER","info","success","lib","transition","Zoom","React","Component","ImageButtonsGrid","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","imageService","notifications","createRef","state","images","loadNewImageSet","_this2","destroyImageSet","getRandomImageUrls","imageUrls","forEach","clicked","setState","console","log","Array","fill","slice","current","resetScore","handleSuccessfulClick","increaseScore","some","reorderImages","newImageSetLoaded","sort","_this3","components_ImageButton","key","handleClick","_this4","Fragment","index","renderImageButton","components_Notifications","ref","Navbar","href","score","topScore","Spotlight","App","max","components_Navbar","components_Spotlight","components_ImageButtonsGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.753da1e5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageButton(props) {\n  return (\n    <div className=\"image-button-wrapper\">\n      <button className=\"image-button\" onClick={props.onClick}>\n        <img className=\"img-fluid\" src={props.url} alt=\"\" />\n      </button>\n    </div>\n  );\n}\n\nexport default ImageButton;\n","import axios from \"axios\";\n\nconst IMAGE_LIST_URL = \"https://picsum.photos/list\";\nconst IMAGE_BASE_URL = \"https://picsum.photos/300/300?image=\";\n\nclass ImageService {\n  getRandomImageUrls() {\n    return new Promise((resolve, reject) => {\n      axios\n        .get(IMAGE_LIST_URL)\n        .then(response => {\n          const imageIds = response.data.map(image => image.id);\n\n          resolve(this.extractRandomImageUrls(imageIds));\n        })\n        .catch(err => reject(err));\n    });\n  }\n\n  extractRandomImageUrls(imageIds) {\n    const IMAGES_TO_RETRIEVE = 16;\n    const randomImageUrls = [];\n    const startingIndex = parseInt(\n      Math.random() * (imageIds.length - IMAGES_TO_RETRIEVE)\n    );\n\n    for (let i = startingIndex; i < startingIndex + IMAGES_TO_RETRIEVE; i++) {\n      randomImageUrls.push(`${IMAGE_BASE_URL}${imageIds[i]}`);\n    }\n\n    return randomImageUrls;\n  }\n}\n\nexport default ImageService;\n","import React from \"react\";\nimport { ToastContainer, toast, Zoom } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nclass Notifications extends React.Component {\n  error() {\n    toast.dismiss();\n    toast.error(\"You guessed wrong!\", {\n      autoClose: 1500,\n      position: toast.POSITION.BOTTOM_CENTER\n    });\n  }\n\n  newImageSetLoaded() {\n    toast.dismiss();\n    toast.info(\"New images loaded\", {\n      autoClose: 3000,\n      position: toast.POSITION.BOTTOM_CENTER\n    });\n  }\n\n  success() {\n    toast.dismiss();\n    toast.success(\"You guessed right!\", {\n      autoClose: 1500,\n      position: toast.POSITION.BOTTOM_CENTER\n    });\n  }\n\n  render() {\n    return <ToastContainer transition={Zoom} />;\n  }\n}\n\nexport default Notifications;\n","import React from \"react\";\nimport \"./style.css\";\nimport ImageButton from \"../ImageButton\";\nimport ImageService from \"../../services/ImageService\";\nimport Notifications from \"../Notifications\";\n\nclass ImageButtonsGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.imageService = new ImageService();\n    this.notifications = React.createRef();\n    this.state = {\n      images: []\n    };\n  }\n\n  componentDidMount() {\n    this.loadNewImageSet();\n  }\n\n  loadNewImageSet() {\n    this.destroyImageSet();\n\n    this.imageService\n      .getRandomImageUrls()\n      .then(imageUrls => {\n        const images = [];\n\n        imageUrls.forEach(url => {\n          images.push({\n            clicked: false,\n            url: url\n          });\n        });\n\n        this.setState({ images });\n      })\n      .catch(err => console.log(err));\n  }\n\n  destroyImageSet() {\n    this.setState({ images: Array(16).fill({ url: \"\" }) });\n  }\n\n  handleClick(i) {\n    const images = this.state.images.slice();\n    if (!images[i].clicked) {\n      images[i].clicked = true;\n      this.handleSuccessfulClick(images);\n    } else {\n      this.notifications.current.error();\n      this.props.resetScore();\n      this.loadNewImageSet();\n    }\n  }\n\n  handleSuccessfulClick(images) {\n    this.props.increaseScore();\n    if (images.some(image => !image.clicked)) {\n      this.setState({ images });\n      this.reorderImages();\n      this.notifications.current.success();\n    } else {\n      this.loadNewImageSet();\n      this.notifications.current.newImageSetLoaded();\n    }\n  }\n\n  reorderImages() {\n    let images = this.state.images.slice();\n\n    images = images.sort(function() {\n      return 0.5 - Math.random();\n    });\n\n    this.setState({ images });\n  }\n\n  renderImageButton(i) {\n    return (\n      <ImageButton\n        key={i}\n        url={this.state.images[i].url}\n        onClick={() => this.handleClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"container image-buttons-grid\">\n          {this.state.images.map((image, index) => {\n            return this.renderImageButton(index);\n          })}\n        </div>\n        <Notifications ref={this.notifications} />\n      </>\n    );\n  }\n}\n\nexport default ImageButtonsGrid;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar\">\n      <div className=\"row flex-nowrap justify-content-between align-items-center w-100\">\n        <div className=\"col-md-4\">\n          <a href=\"/\">Clicky Game</a>\n        </div>\n        <div className=\"col-md-4\">\n          {props.score === 0 ? \"Click an image to begin!\" : \"\"}\n        </div>\n        <div className=\"col-md-4\">\n          <span>Score: {props.score}</span>\n          <span className=\"d-none d-md-inline\"> | </span>\n          <span className=\"d-block d-md-inline\">\n            Top Score: {props.topScore}\n          </span>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Spotlight(props) {\n  return (\n    <div className=\"spotlight\">\n      <div className=\"container\">\n        <h1>\n          Click on an image to earn points, but don't click on any more than\n          once!\n        </h1>\n      </div>\n    </div>\n  );\n}\n\nexport default Spotlight;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ImageButtonsGrid from \"./components/ImageButtonsGrid\";\nimport Navbar from \"./components/Navbar\";\nimport Spotlight from \"./components/Spotlight\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      score: 0,\n      topScore: 0\n    };\n  }\n\n  increaseScore() {\n    const score = this.state.score + 1;\n    const topScore = Math.max(this.state.topScore, score);\n    this.setState({ score, topScore });\n  }\n\n  resetScore() {\n    this.setState({ score: 0 });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar score={this.state.score} topScore={this.state.topScore} />\n        <Spotlight />\n        <ImageButtonsGrid\n          increaseScore={() => this.increaseScore()}\n          resetScore={() => this.resetScore()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}